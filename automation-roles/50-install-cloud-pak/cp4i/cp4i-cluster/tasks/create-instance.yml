---

- name: Create instance
  block:

  - debug:
      msg: "### Creating instance of {{ current_cp4i_instance.type }} "  

  # ---------- FIND INSTANCE TYPE DEFINITION --------------

  - name: Get instance type details
    set_fact:
      _inst_type_def: "{{ instance_types | json_query(query) | first | default({}) }}"
    vars:
      query: >-
        [?type=='{{ current_cp4i_instance.type }}']

  - name: Fail if the instance type cannot be found
    fail:
      msg: "Case instance type for instance {{ current_cp4i_instance.name }} not found."
    when: _inst_type_def=={}

  # ---------- FIND VERSION PROPERTIES -----------------------

  - name: Find version specific instance type properties
    include_tasks: get-instance-properties.yml

  # ---------- DETERMINE SUBSCRIPTION NAME ---------------- 

  - set_fact:
      _subscription_name: "{{ _inst_type_def.package_name }}"

  - debug:
      msg: "Subscription name: {{ _subscription_name }}"
    

  # ---------- WAIT FOR SUBSCRIPTION ----------------------

  - name: Wait for the {{ _subscription_name }} subscription
    shell: |
      csv=$(oc get subscription -n openshift-operators {{ _subscription_name }} -o json | jq -r .status.currentCSV)
      if [[ "$csv" == "null" ]]; then
        echo "null"
      else
        oc get csv -n openshift-operators ${csv} -o json 2>/dev/null | jq -r .status.phase
      fi
    register: pn_phase
    retries: 100
    delay: 20
    until: pn_phase.stdout == "Succeeded"

  # ---------- CREATE INSTANCE ----------------------------

  - name: Check if the {{instance_properties.type}} {{instance_properties.name}} already exists
    shell: |
      oc get {{_inst_type_def.kind}} {{instance_properties.name}} -n {{current_cp4i_cluster.project}} | grep -i '^{{instance_properties.name}}' | wc -l
    register: instance_exists  

  - set_fact:
      instance_template: "{{ instance_properties.template | default(default_template_name) }}"
    vars:
      default_template_name: "{{ _inst_type_def.default_template }}"

  - name: Prepare yaml file for creating instance
    template:
      src: "{{instance_template}}.j2"
      dest: "{{ status_dir }}/cp4i/{{instance_properties.type}}-{{instance_properties.name}}.yml"
    when: instance_exists.stdout == "0"

  - name: Create instance from {{ status_dir }}/cp4i/{{instance_properties.type}}-{{instance_properties.name}}.yml
    shell: |
      oc apply -f {{ status_dir }}/cp4i/{{instance_properties.type}}-{{instance_properties.name}}.yml
    when: instance_exists.stdout == "0"

  # ---------- WAITING FOR INSTANCE TO BECOME READY -------
         # --- Currently only Platform Navigator ----

  - name: Wait for the {{_inst_type_def.kind}} to become ready
    shell: |
      oc get {{_inst_type_def.kind}} -n {{current_cp4i_cluster.project}} {{instance_properties.name}} -o json | jq -r '.status.conditions[] | select(.type=="Ready").status'
    register: instance_status
    retries: 300
    delay: 30
    until: instance_status.stdout == "True"
    when: instance_properties.type == 'platform-navigator'


  when: (current_cp4i_instance.state | default('installed')) == 'installed'


