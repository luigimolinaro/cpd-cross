---
- name: Validate mandatory variables are defined
  assert:
    that:
      - cloud_platform is defined

- name: Validate cloud_platform is implemented
  fail: msg="cloud_platform {{ cloud_platform }} is not implemented, current implemented cloud platforms are {{ implemented_cloud_platform_types }} "
  when: "cloud_platform not in implemented_cloud_platform_types"

- name: Check if ARO cluster already exists by checking kubeadmin password secret
  include_role:
    name: vault-get-secret
  vars:
    secret_name: "{{ _current_openshift_cluster.name }}-kubeadmin-password"
    secret_group: "{{ environment_name }}"

- set_fact:
    _aro_start_provisioning: "{{ true if secret_value == '' else false }}"

# We could even check if the resource group in Azure exists
# - if it exists -> skip this block
# - if it does not exist -> continue with this block

- name: Provision Azure ARO
  block:
    - name: Retrieve Azure subscription id
      include_role:
        name: vault-get-secret
      vars:
        secret_name: "aro-subscription-id"
        secret_group: "{{ environment_name }}"

    - set_fact:
        _subscription_id: "{{ secret_value }}"

    - name: Retrieve Azure tenant id
      include_role:
        name: vault-get-secret
      vars:
        secret_name: "aro-tenant-id"
        secret_group: "{{ environment_name }}"

    - set_fact:
        _tenant_id: "{{ secret_value }}"

    - name: "[Clean up] Remove remaining .terraform directory and other files if exist"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/.terraform"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/.terraform.lock.hcl"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/terraform.tfstate"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/terraform.tfstate.backup"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/plan.log"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/apply.log"
        - "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/tf_apply.log"

    - name: "Run terraform init in Terraform directory {{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}"
      shell:
        chdir: "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}"
        cmd: "terraform init"

    - name: "Run terraform plan in Terraform directory {{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}, check {{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/plan.log"
      shell: |
        set -o pipefail
        terraform plan -destroy -no-color -detailed-exitcode 2>&1 \
          | tee {{status_dir}}/terraform/plan.log
      args:
        chdir: "{{status_dir}}/terraform"
      environment:
        ARM_CLIENT_ID: "{{ _service_principal_id }}"
        ARM_CLIENT_SECRET: "{{ _service_principal_secret }}"
        ARM_SUBSCRIPTION_ID: "{{ _subscription_id }}"
        ARM_TENANT_ID: "{{ _tenant_id }}"
      register: _terraform_plan_result
      failed_when: "_terraform_plan_result.rc == 1"
      # _terraform_plan_result.rc == 0 -> success, no changes
      # _terraform_plan_result.rc == 1 -> error
      # _terraform_plan_result.rc == 2 -> success, changes present

    - debug:
        var: _terraform_plan_result

    - fail:
        msg: Error occurred during Terraform plan. Failing now. Check the plan.log file for details.
      when:
        - _terraform_plan_result.rc == 1

    - name: "Run terraform apply in Terraform directory {{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}, check {{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/apply.log"
      shell: |
        set -o pipefail
        terraform apply -auto-approve -no-color 2>&1 \
          | tee {{status_dir}}/terraform/apply.log
      environment:
        TF_LOG: "info"
        TF_LOG_PATH: "{{status_dir}}/azure-aro/{{_current_openshift_cluster.name}}/tf_apply.log"
        ARM_CLIENT_ID: "{{ _service_principal_id }}"
        ARM_CLIENT_SECRET: "{{ _service_principal_secret }}"
        ARM_SUBSCRIPTION_ID: "{{ _subscription_id }}"
        ARM_TENANT_ID: "{{ _tenant_id }}"
      register: _terraform_apply_result
      ignore_errors: yes
      when: _terraform_plan_result.rc == 2

    - debug:
        var: _terraform_apply_result

    - fail:
        msg: Error occurred during Terraform apply procedure. Failing now. Check the apply.log file for details.
      when: _terraform_apply_result.rc != 0

    - name: Parse output log (kubeadmin password and API endpoints) and store into the vault
      include_tasks: parse-output-store-vault.yml
      when: _terraform_apply_result.rc == 0

  when: _aro_start_provisioning
